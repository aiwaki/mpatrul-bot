import { Markup, Scenes } from "telegraf";
import { getPageInfo } from "../../browser/page";
import { fetchToken } from "../../database/chats";
import { insertLink } from "../../database/links";
import { insertClassification, insertPage } from "../../database/pages";
import { sendReport } from "../../utils/sendReport";

export const linkWizard = new Scenes.WizardScene<Scenes.WizardContext>(
  "link",
  async (ctx) => {
    await ctx.sendChatAction("typing");
    await ctx.reply(
      "üëã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
      Markup.inlineKeyboard([[Markup.button.callback("–û—Ç–º–µ–Ω–∞", "cancel")]])
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId) {
      await ctx.sendChatAction("typing");
      await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.");
      return ctx.scene.leave();
    }

    try {
      if (!(ctx.message && "text" in ctx.message)) {
        return ctx.scene.leave();
      }

      const url = ctx.message.text.trim();
      const urlRegex = /https?:\/\/[^\s]+/;
      if (!url || !urlRegex.test(url)) {
        await ctx.sendChatAction("typing");
        await ctx.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.");
        return ctx.wizard.back();
      }

      const token = await fetchToken(chatId);
      if (!token) {
        await ctx.sendChatAction("typing");
        await ctx.reply("‚ö†Ô∏è –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.");
        return ctx.scene.leave();
      }

      const pageInfo = await getPageInfo(url);
      if (!pageInfo) {
        await ctx.sendChatAction("typing");
        await ctx.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
        return ctx.scene.leave();
      }

      await sendReport(chatId, pageInfo);
      await insertLink(chatId, pageInfo.url);

      const classifyOutId = await insertClassification({
        label: pageInfo.classifyOut.label,
        content: pageInfo.classifyOut.content,
        score: pageInfo.classifyOut.score,
      });
      await insertPage({
        title: pageInfo.title,
        description: pageInfo.description,
        url: pageInfo.url,
        classify_out_id: classifyOutId,
      });

      await ctx.sendChatAction("typing");
      await ctx.reply("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.");
      await ctx.scene.leave();
    } catch (error) {
      if (error instanceof Error) {
        if (error.message === "Report already exists") {
          await ctx.sendChatAction("typing");
          await ctx.reply("‚úÖ –û—Ç—á–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
          return ctx.scene.leave();
        }

        console.error(
          "üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:",
          error.message
        );
        await ctx.sendChatAction("typing");
        await ctx.reply("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
        return ctx.scene.leave();
      }
    }
  }
);

linkWizard.action("cancel", async (ctx) => {
  await ctx.sendChatAction("typing");
  await ctx.reply("üëå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  await ctx.scene.leave();
});
