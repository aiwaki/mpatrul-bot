import { Markup, Scenes } from 'telegraf';
import { fmt, bold } from 'telegraf/format';
import { fetchToken, insertLink } from '../../database/api';
import { screenshotPage } from '../../browser/pages';
import { createLink, type CreateLinkRequestParams } from '../../services/links';
import { createReport, type CreateReportRequestParams } from '../../services/reports';
import { ReportType } from '../../utils/constants';
import { createMedia, Media, type CreateMediaRequestParams } from '../../services/media';
import { uploadFile } from '../../utils/uploadFile';

export const linkWizard = new Scenes.WizardScene<Scenes.WizardContext>(
    'link',
    async (ctx) => {
        await ctx.sendChatAction('typing');
        await ctx.reply(
            'üëã –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.',
            Markup.inlineKeyboard([
                [Markup.button.callback('–û—Ç–º–µ–Ω–∞', 'cancel')],
            ])
        );
        return ctx.wizard.next();
    },
    async (ctx) => {
        const chatId = ctx.chat?.id;
        if (!chatId) {
            await ctx.sendChatAction('typing');
            await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.');
            return ctx.scene.leave();
        }

        try {
            if (!(ctx.message && 'text' in ctx.message)) {
                return ctx.scene.leave();
            }

            const url = ctx.message.text.trim();
            if (!url) {
                await ctx.sendChatAction('typing');
                await ctx.reply('‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return ctx.wizard.back();
            }

            const token = await fetchToken(chatId)
            if (!token) {
                await ctx.sendChatAction('typing');
                await ctx.reply('‚ö†Ô∏è –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç.');
                return ctx.scene.leave();
            }

            const createLinkParams: CreateLinkRequestParams = { url }
            const linkResponse = await createLink(createLinkParams, chatId);
            if (linkResponse.error) throw new Error(linkResponse.error);
            const data = linkResponse.data;

            const message = fmt`
üìÑ ${bold('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏')}

üîó ${bold('–°—Å—ã–ª–∫–∞')}: ${data.link.url}
üîÑ ${bold('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫')}: ${data.count}
‚è±Ô∏è ${bold('–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏')}: ${data.updatedAt ? new Date(data.updatedAt).toLocaleString() : '–ù–∏–∫–æ–≥–¥–∞'}
üìú ${bold('–û—Ç—á–µ—Ç')}: ${data.report ? '‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω' : '‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'}
                `;

            await ctx.sendChatAction('typing');
            await ctx.reply(message, { parse_mode: 'Markdown' });

            if (data.report) {
                return ctx.scene.leave();
            }

            const mediaParams: CreateMediaRequestParams = {
                format: Media.PNG
            };
            const mediaResponse = await createMedia(mediaParams, chatId);
            if (mediaResponse.error) throw new Error(mediaResponse.error);

            const screenshot = await screenshotPage(url);
            await uploadFile(mediaResponse.data.upload, screenshot);

            /*             const createRequestParams: CreateReportRequestParams = {
                            url: site.url,
                            content: classifyOut.content,
                            isPersonal: true,
                            isMedia: false,
                            desciption: site.description || classifyOut.label,
                            photoId: mediaResponse.data.id,
                        };
                        const reportResponse = await createReport(createRequestParams, chatId);
                        if (reportResponse.error) throw new Error(reportResponse.error);
            
                        await insertLink(chatId, site.url); // –í –Ω–∞—á–∞–ª–µ —Å–æ–∑–¥–∞—ë–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º */

            await ctx.sendChatAction('typing');
            await ctx.reply('‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.');
            await ctx.scene.leave();
        } catch (error) {
            console.error('üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞:', error);

            await ctx.sendChatAction('typing');
            await ctx.reply('üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
            await ctx.scene.leave();
        }
    }
);

linkWizard.action('cancel', async (ctx) => {
    await ctx.sendChatAction('typing');
    await ctx.reply('üëå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
    await ctx.scene.leave();
});