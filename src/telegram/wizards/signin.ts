import { Composer, Scenes, Markup } from 'telegraf';
import { apiClient } from '../../mpatrul/client.ts';
import { fetchLogin, fetchPassword, hasToken, updateLogin, updatePassword, updateToken } from '../../database/api.ts';

export const signinWizard = new Scenes.WizardScene<Scenes.WizardContext>(
    'signin',
    async (ctx) => {
        try {
            const chatId = ctx.chat?.id;
            if (!chatId) {
                await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.');
                return ctx.scene.leave();
            }

            const token = (await hasToken(chatId)).mpatrul_token;
            if (token) {
                await ctx.reply(
                    'üîÑ –í—ã —É–∂–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç. –•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑?',
                    Markup.inlineKeyboard([
                        [Markup.button.callback('–î–∞', 'start-signin')],
                        [Markup.button.callback('–ù–µ—Ç', 'no-signin')],
                    ])
                );
            } else {
                await ctx.reply('üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
                return ctx.wizard.next();
            }
        } catch (error) {
            console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—Ö–æ–¥–∞:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        const chatId = ctx.chat?.id;
        if (!chatId) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.');
            return ctx.scene.leave();
        }
        if (ctx.message && 'text' in ctx.message) {
            const login = ctx.message.text.trim();
            if (!login) {
                await ctx.reply('‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return ctx.wizard.back();
            }
            await updateLogin(chatId, login);
        }
        await ctx.reply('üîí –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:');
        return ctx.wizard.next();
    },
    async (ctx) => {
        const chatId = ctx.chat?.id;
        if (!chatId) {
            await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞.');
            return ctx.scene.leave();
        }
        if (ctx.message && 'text' in ctx.message) {
            const password = ctx.message.text.trim();
            if (!password) {
                await ctx.reply('‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return ctx.wizard.back();
            }
            await updatePassword(chatId, password);
        }

        const login = (await fetchLogin(chatId)).mpatrul_login
        const password = (await fetchPassword(chatId)).mpatrul_password

        if (!login || !password) {
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
            return ctx.scene.leave();
        }

        try {
            const loginResponse = await apiClient.signIn(login, password);

            if (!loginResponse.data) {
                console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', loginResponse.error);
                await ctx.reply('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                return ctx.scene.leave();
            }

            await updateToken(chatId, loginResponse.data.accessToken);
            await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }

        return ctx.scene.leave();
    }
);

signinWizard.action('no-signin', async (ctx) => {
    await ctx.reply('üëå –•–æ—Ä–æ—à–æ, –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –≤ —Ç–µ–∫—É—â–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.');
    await ctx.scene.leave();
});

signinWizard.action('start-signin', async (ctx) => {
    await ctx.reply('üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:');
    return ctx.wizard.selectStep(1);
});